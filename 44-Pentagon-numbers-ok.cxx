#include <iostream>
#include <vector> 
#include <cmath>
#include <algorithm>

//Pentagon numbers
//Problem 44
//
//Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
//
//1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
//It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
//
//Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
//
//

bool isPentagonal(int x) {
    // Pn = n(3n-1)/2
    unsigned long n = (1+sqrt(1+24*x))/6;
    unsigned long Pn = n*(3*n-1)/2;
    return Pn==x;
}

int main() {
    unsigned int n =2;     // for P2
    while (true) {
        //generate Pn 
        auto Pn = n *(3*n -1)/2;

        //check with all previous Pn's starting from 1 to Pn-1
        for(unsigned int delta=1; delta<n; delta++) {
            //index 
            auto x = n-delta;
            auto Px= x * (3*x -1)/2;
            //check for sum=Pn+Px and diff=Pn-Px
            if(isPentagonal(Pn+Px) && isPentagonal(Pn-Px)) {
                std::cout <<  Pn-Px << std::endl;
                return 0;
            }
        }
        n++;
    }
    return 0;
}

