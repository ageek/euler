#include <iostream>
#include <vector> 
#include <algorithm>
#include <climits>
#include <cmath>

//Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
//Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
//Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
//Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
//
//It can be verified that T285 = P165 = H143 = 40755.
//
//Find the next triangle number that is also pentagonal and hexagonal
//
//Core algo:
//1. for a number that is tri + penta + hexa: 
//2. index in T > index in P > index in H
//3. generate all H's and see if that is T also,
//4. Note: all H are T, so we just need to check for P only
//
//Initial numbers <500 are :
//Triangles: 1,3,6,10,15,21,28,36,45,55,66,78,91,105,120,136,153,171,190,210,231,253,276,300,325,351,378,406,435,465,496,
//Pentagonal:1,5,12,22,35,51,70,92,117,145,176,210,247,287,330,376,425,477,
//Hexagonal: 1,6,15,28,45,66,91,120,153,190,231,276,325,378,435,496,
//
//Every Hn is T(2n-1), every hexagonal number is also a triangular number
//https://en.wikipedia.org/wiki/Hexagonal_number
//https://en.wikipedia.org/wiki/Triangular_number

bool isTriagonal(unsigned long long x) {
    // Tn = n(n+1)/2
    // Solve the quadratic equation for n
    // n = (-1+sqrt(1+8*x))/2;
    unsigned long long n = (-1+sqrt(1+8*x))/2;
    unsigned long long Tn = n*(n+1)/2;
    return Tn==x;
}

bool isPentagonal(unsigned long long x) {
    // Pn = n(3n-1)/2
    unsigned long long n = (1+sqrt(1+24*x))/6;
    unsigned long long Pn = n*(3*n-1)/2;
    return Pn==x;
}

bool isHexagonal(unsigned long long x) {
    // Hn = n(2n-1)
    unsigned long long n = (1+sqrt(1+8*x))/4;
    unsigned long long Hn = n*(2*n-1);
    return Hn==x;
}

int main() {
    //order : hexagonal > Penta > Tri
    //check 144+ onwards, as we already have H143=P165=T285
    for(unsigned long long x=144; ; x++) {
        unsigned long long h=x * (2*x - 1);
        //just check of Penta only
        if(isPentagonal(h)) {
            //found one, bail out!
            std::cout << h << std::endl; 
            return 0;
        }
    }
    return 0;
}
